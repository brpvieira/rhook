// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter2, Hook, async, redis, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  redis = require('redis');

  EventEmitter2 = require('eventemitter2').EventEmitter2;

  _ = require('underscore');

  async = require('async');

  Hook = (function(_super) {

    __extends(Hook, _super);

    function Hook(config) {
      var defaults;
      defaults = {
        channel: "hook",
        wildcard: true,
        delimiter: "::",
        auth: false,
        host: null,
        port: null,
        redisOptions: null
      };
      this.config = _.defaults(config, defaults);
      this.config.newListener = false;
      Hook.__super__.constructor.call(this, _.pick(this.config, 'wildcard', 'delimiter', 'newListener'));
    }

    Hook.prototype._bindSubscriberEvents = function() {
      var _this = this;
      this._subscriber.on('subscribe', function(channel, count) {
        _this._subscriber.on('message', function(channel, msg) {
          return _this._onMessage(channel, msg);
        });
        return _this._emit('subscribe', channel, count);
      });
      this._subscriber.on('unsubscribe', function(channel, count) {
        return _this._emit('unsubscribe'.channel, count);
      });
      this._subscriber.on('ready', function() {
        return _this._subscriber.subscribe(_this.config.channel);
      });
      this._subscriber.on('end', function() {
        return _this._emit('subscriberend');
      });
      return this._subscriber.on('error', function(err) {
        return _this._emit('subscribererror', err);
      });
    };

    Hook.prototype._bindPublisherEvents = function() {
      var _this = this;
      this._publisher.on('ready', function() {
        return _this._emit('publisherready');
      });
      this._publisher.on('end', function() {
        return _this._emit('publisherend');
      });
      return this._publisher.on('error', function(err) {
        _this._publisherReady = false;
        return _this._emit('publishererror', err);
      });
    };

    Hook.prototype._emit = function() {
      return EventEmitter2.prototype.emit.apply(this, arguments);
    };

    Hook.prototype.emit = function(name, data) {
      var eventData;
      if (name === "newListener") {
        return this._emit.apply(this, arguments);
      }
      if (!this._publisherReady) {
        this._initPublisher();
      }
      eventData = JSON.stringify({
        source: this.config.name,
        version: this.config.version || "0.0.0",
        name: name,
        data: data || {}
      });
      return this._publisher.publish(this.config.channel, eventData);
    };

    Hook.prototype._onMessage = function(channel, msg) {
      var data, name, source, version, _ref;
      if (channel !== this.config.channel) {
        return false;
      }
      _ref = JSON.parse(msg), source = _ref.source, version = _ref.version, name = _ref.name, data = _ref.data;
      if (source === this.config.name) {
        return false;
      }
      return this._emit("" + source + this.config.delimiter + name, data);
    };

    Hook.prototype._initPublisher = function(cb) {
      var errorHandler, successHandler,
        _this = this;
      if (this._publisherReady) {
        return cb(null, this._publisher);
      }
      this._publisher = redis.createClient(this.config.port, this.config.host, this.config.redisOptions);
      if (this.config.auth) {
        this._publisher.auth(this.config.auth);
      }
      this._bindPublisherEvents();
      errorHandler = function(err) {
        _this._publisherReady = false;
        _this.off('publisherready', successHandler);
        return cb(err);
      };
      successHandler = function() {
        _this._publisherReady = true;
        _this.off('publishererror', errorHandler);
        return cb(null, _this._publisher);
      };
      this.once('publishererror', errorHandler);
      return this.once('publisherready', successHandler);
    };

    Hook.prototype._initSubscriber = function(cb) {
      var errorHandler, successHandler,
        _this = this;
      if (this._subscriberReady) {
        return cb(null, this._subscriber);
      }
      this._subscriber = redis.createClient(this.config.port, this.config.host, this.config.redisOptions);
      if (this.config.auth) {
        this._subscriber.auth(this.config.auth);
      }
      this._bindSubscriberEvents();
      errorHandler = function(err) {
        _this._subscriberReady = false;
        _this.off('subscribe', successHandler);
        return cb(err);
      };
      successHandler = function() {
        _this._subscriberReady = true;
        _this.off('subscriberrerror', errorHandler);
        return cb(null, _this._subscriber);
      };
      this.once('subscriberrerror', errorHandler);
      return this.once('subscribe', successHandler);
    };

    Hook.prototype._resetClientsAndEmitConnectionEnd = function() {
      this._publisherReady = false;
      this._subscriberReady = false;
      this._publisher = null;
      this._subscriber = null;
      return this._emit("hook" + this.config.delimiter + "connection" + this.config.delimiter + "end");
    };

    Hook.prototype._onSubscriberEnd = function() {
      this.off('publisherend', this._onPubliserEnd);
      this._publisher.end();
      return this._resetClientsAndEmitConnectionEnd();
    };

    Hook.prototype._onPubliserEnd = function() {
      this.off('subscriberend', this._onSubscriberEnd);
      this._subscriber.end();
      return this._resetClientsAndEmitConnectionEnd();
    };

    Hook.prototype.start = function() {
      var _this = this;
      return async.parallel([
        function(cb) {
          return _this._initPublisher(cb);
        }, function(cb) {
          return _this._initSubscriber(cb);
        }
      ], function(err, results) {
        if (err != null) {
          return _this._emit('error', err);
        }
        _this._emit("hook" + _this.config.delimiter + "ready");
        _this.once('publisherend', function() {
          return _this._onPubliserEnd();
        });
        return _this.once('subscriberend', function() {
          return _this._onSubscriberEnd();
        });
      });
    };

    return Hook;

  })(EventEmitter2);

  module.exports = {
    Hook: Hook
  };

}).call(this);
