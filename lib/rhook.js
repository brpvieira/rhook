// Generated by CoffeeScript 1.6.3
(function() {
  var A, EventEmitter2, Hook, redis, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  redis = require('redis');

  EventEmitter2 = require('eventemitter2').EventEmitter2;

  _ = require('underscore');

  A = require('async');

  Hook = (function(_super) {
    __extends(Hook, _super);

    function Hook(config) {
      var defaults, handler, _fn, _i, _len, _ref,
        _this = this;
      defaults = {
        channel: "hook",
        wildcard: true,
        delimiter: "::",
        auth: false,
        host: null,
        port: null,
        redisOptions: {
          retry_max_delay: 1000
        }
      };
      this.config = _.defaults(config, defaults);
      this.config.newListener = false;
      _ref = _.functions(this);
      _fn = function(handler) {
        if (handler.indexOf('_on') === 0) {
          return _this[handler] = _.bind(_this[handler], _this);
        }
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handler = _ref[_i];
        _fn(handler);
      }
      this._watchForReadyState = _.bind(this._watchForReadyState, this);
      Object.defineProperty(this, "_publisherReady", {
        get: function() {
          if (!_this._publisher) {
            return false;
          }
          return _this._publisher.connected;
        }
      });
      Object.defineProperty(this, "_subscriberReady", {
        get: function() {
          if (!(_this._subscriber && _this._subscriber.connected)) {
            return false;
          }
          return _this._subscriber.subscription_set["sub " + _this.config.channel];
        }
      });
      Hook.__super__.constructor.call(this, _.pick(this.config, 'wildcard', 'delimiter', 'newListener'));
    }

    Hook.prototype.emit = function(name, data) {
      var eventData;
      if (name === "newListener") {
        return this._emit.apply(this, arguments);
      }
      if (!this._publisherReady) {
        this._initPublisher();
      }
      eventData = JSON.stringify({
        source: this.config.name,
        version: this.config.version || "0.0.0",
        name: name,
        data: data || {}
      });
      return this._publisher.publish(this.config.channel, eventData);
    };

    Hook.prototype._watchForReadyState = function() {
      var doNothing, doneFn, testFn;
      if (this._isWatching) {
        return;
      }
      this._isWatching = true;
      doNothing = function(cb) {
        return setTimeout(cb, 100);
      };
      testFn = function() {
        return this._publisherReady && this._subscriberReady;
      };
      doneFn = function() {
        this._isWatching = false;
        return this._emit("hook" + this.config.delimiter + "ready");
      };
      return A.until(_.bind(testFn, this), doNothing, _.bind(doneFn, this));
    };

    Hook.prototype.start = function() {
      this._watchForReadyState();
      this._initPublisher();
      return this._initSubscriber();
    };

    Hook.prototype._onSubscribe = function(channel, count) {
      return this._emit('subscribe', channel, count);
    };

    Hook.prototype._onUnsubscribe = function(channel, count) {
      return this._emit('unsubscribe'.channel, count);
    };

    Hook.prototype._onSubscriberReady = function() {
      return this._subscriber.subscribe(this.config.channel);
    };

    Hook.prototype._onMessage = function(channel, msg) {
      var data, name, source, version, _ref;
      if (channel !== this.config.channel) {
        return false;
      }
      _ref = JSON.parse(msg), source = _ref.source, version = _ref.version, name = _ref.name, data = _ref.data;
      if (source === this.config.name) {
        return false;
      }
      return this._emit("" + source + this.config.delimiter + name, data);
    };

    Hook.prototype._onSubscriberEnd = function() {
      return this._emit('subscriberend');
    };

    Hook.prototype._onSubscriberError = function(err) {
      this._emit('subscribererror', err);
      return this._onConnectionError(err);
    };

    Hook.prototype._onPublisherReady = function() {
      return this._emit('publisherready');
    };

    Hook.prototype._onPublisherEnd = function() {
      return this._emit('publisherend');
    };

    Hook.prototype._onPublisherError = function(err) {
      this._emit('publishererror', err);
      return this._onConnectionError(err);
    };

    Hook.prototype._onConnectionError = function(err) {
      var retryCount, retryDelay;
      this._watchForReadyState();
      retryCount = Math.max(this._subscriber.attempts, this._publisher.attempts);
      retryDelay = Math.max(this._subscriber.retry_delay, this._publisher.retry_delay);
      return this._emit('connectionerror', err, retryCount, retryDelay);
    };

    Hook.prototype._bindSubscriberEvents = function() {
      this._subscriber.on('message', this._onMessage);
      this._subscriber.on('subscribe', this._onSubscribe);
      this._subscriber.on('unsubscribe', this._onUnsubscribe);
      this._subscriber.on('ready', this._onSubscriberReady);
      this._subscriber.on('end', this._onSubscriberEnd);
      return this._subscriber.on('error', this._onSubscriberError);
    };

    Hook.prototype._bindPublisherEvents = function() {
      this._publisher.on('ready', this._onPublisherReady);
      this._publisher.on('end', this._onPublisherEnd);
      return this._publisher.on('error', this._onPublisherError);
    };

    Hook.prototype._emit = function() {
      return EventEmitter2.prototype.emit.apply(this, arguments);
    };

    Hook.prototype._initPublisher = function() {
      if (this._publisherReady) {
        return this._publisher;
      }
      this._publisher = redis.createClient(this.config.port, this.config.host, this.config.redisOptions);
      this._bindPublisherEvents();
      if (this.config.auth) {
        this._publisher.auth(this.config.auth);
      }
      return this._publisher;
    };

    Hook.prototype._initSubscriber = function() {
      if (this._subscriberReady) {
        return this._subscriber;
      }
      this._subscriber = redis.createClient(this.config.port, this.config.host, this.config.redisOptions);
      this._bindSubscriberEvents();
      if (this.config.auth) {
        this._subscriber.auth(this.config.auth);
      }
      return this._subscriber;
    };

    Hook.prototype._resetClients = function() {
      this._publisherReady = false;
      return this._subscriberReady = false;
    };

    return Hook;

  })(EventEmitter2);

  module.exports = {
    Hook: Hook
  };

}).call(this);
